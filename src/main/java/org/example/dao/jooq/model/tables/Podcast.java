/*
 * This file is generated by jOOQ.
 */
package org.example.dao.jooq.model.tables;


import org.example.dao.jooq.model.ElService;
import org.example.dao.jooq.model.Keys;
import org.example.dao.jooq.model.tables.records.PodcastRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Podcast extends TableImpl<PodcastRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>el_service.podcast</code>
     */
    public static final Podcast PODCAST = new Podcast();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PodcastRecord> getRecordType() {
        return PodcastRecord.class;
    }

    /**
     * The column <code>el_service.podcast.id</code>.
     */
    public final TableField<PodcastRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>el_service.podcast.metadata</code>.
     */
    public final TableField<PodcastRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>el_service.podcast.body</code>.
     */
    public final TableField<PodcastRecord, JSON> BODY = createField(DSL.name("body"), SQLDataType.JSON, this, "");

    private Podcast(Name alias, Table<PodcastRecord> aliased) {
        this(alias, aliased, null);
    }

    private Podcast(Name alias, Table<PodcastRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>el_service.podcast</code> table reference
     */
    public Podcast(String alias) {
        this(DSL.name(alias), PODCAST);
    }

    /**
     * Create an aliased <code>el_service.podcast</code> table reference
     */
    public Podcast(Name alias) {
        this(alias, PODCAST);
    }

    /**
     * Create a <code>el_service.podcast</code> table reference
     */
    public Podcast() {
        this(DSL.name("podcast"), null);
    }

    public <O extends Record> Podcast(Table<O> child, ForeignKey<O, PodcastRecord> key) {
        super(child, key, PODCAST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ElService.EL_SERVICE;
    }

    @Override
    public Identity<PodcastRecord, Short> getIdentity() {
        return (Identity<PodcastRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<PodcastRecord> getPrimaryKey() {
        return Keys.PODCAST_PKEY;
    }

    @Override
    public Podcast as(String alias) {
        return new Podcast(DSL.name(alias), this);
    }

    @Override
    public Podcast as(Name alias) {
        return new Podcast(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Podcast rename(String name) {
        return new Podcast(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Podcast rename(Name name) {
        return new Podcast(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, JSONB, JSON> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
